name: Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed

env:
  REGISTRY: docker.io
  IMAGE_NAME: dalglish14/concourse-dcind

jobs:
  pr_check:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-test

  version_bump:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine next version
        id: determine_version
        run: |
          mkdir -p tmp
          if [ -f tmp/version.txt ]; then
            latest_version=$(cat tmp/version.txt)
          else
            if git describe --tags --abbrev=0 > /dev/null 2>&1; then
              latest_tag=$(git describe --tags --abbrev=0)
              latest_version=$(echo $latest_tag | sed 's/^v//')
            else
              latest_version="0.1.0"
            fi
          fi
          IFS='.' read -r -a version_parts <<< "$latest_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch + 1))
          new_version="${major}.${minor}.${new_patch}"
          echo "New version: $new_version"
          echo "$new_version" > tmp/version.txt
          echo "::set-output name=new_version::$new_version"

      - name: Commit version file
        run: |
          new_version=$(cat tmp/version.txt)
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b version-bump-${new_version}
          git add tmp/version.txt
          git commit -m "Add version file with new version ${new_version}"
          git pull --rebase origin version-bump-${new_version} || true
          git push origin HEAD:version-bump-${new_version}
        shell: bash

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          head-branch: version-bump-${{ steps.determine_version.outputs.new_version }}
          base: main
          title: Bump version to ${{ steps.determine_version.outputs.new_version }}
          body: |
            This PR bumps the version to ${{ steps.determine_version.outputs.new_version }}.
          labels: version bump

  build_and_push:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'version-bump-')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current version
        id: get_version
        run: |
          current_version=$(cat tmp/version.txt | sed 's/^v//')
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: dalglish14
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.current_version }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.current_version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
